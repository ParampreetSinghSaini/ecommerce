import upload from '../mongoBackend/config/multer';

const productSchema = new mongoose.Schema({
    name: String,
    category: String,
    image: String,
    new_Price: Number,
    old_price: Number
});

const productModel = mongoose.model("products", productSchema);
const new_collections = mongoose.model("new_collections", productSchema);
const dataProducts = mongoose.model("data_product", productSchema);

app.get("/getProducts", (req, res) => {
    
    productModel.find({}).then(function (products) {
        res.json(products);
    }).catch(function (err) {
        console.log(err);
        res.status(500).json({ error: "Failed to fetch data" });
    });
});

app.get("/new_collections", (req, res) => {
    
    new_collections.find({}).then(function (products) {
        res.json(products);
    }).catch(function (err) {
        console.log(err);
        res.status(500).json({ error: "Failed to fetch data" });
    });
});


app.get("/new_collections/:productId", (req, res) => {
    const productId = req.params.productId;
    new_collections.findById(productId)
        .then(function (product) {
            if (!product) {
                return res.status(404).json({ error: "Product not found" });
            }
            res.json(product);
        })
        .catch(function (err) {
            console.log(err);
            res.status(500).json({ error: "Failed to fetddch data" });
        });
});



app.get("/dataProducts", (req, res) => {
    
    dataProducts.find({}).then(function (products) {
        res.json(products);
    }).catch(function (err) {
        console.log(err);
        res.status(500).json({ error: "Failed to fetch data" });
    });
});



app.post("/addProduct", upload, (req, res) => {
  
   
   
    const { name, category, new_Price, old_price } = req.body;
    const image = req.file; // This will contain the image file data

    // Use the extracted data to create a new product
    const newProduct = new new_collections({
        name,
        category,
        image: image ? image.buffer : undefined,
        new_Price,
        old_price
    });

    newProduct.save()
        .then(() => {
            res.status(201).json({ message: 'Product added successfully' });
        })
        .catch((err) => {
            console.log(err);
            res.status(500).json({ error: "Failed to add product" });
        });
});

app.post("/editProduct/:productId", upload, async (req, res) => {
    const productId = req.params.productId;
    const { name, category, new_Price, old_price } = req.body;
    const image = req.file; // This will contain the image file data

    try {
        // Find the product by ID
        const product = await new_collections.findById(productId);

        if (!product) {
            return res.status(404).json({ error: 'Product not found' });
        }

        // Update product properties
        product.name = name;
        product.category = category;
        product.new_Price = new_Price;
        product.old_price = old_price;

        // Update image if a new one is uploaded
        if (image) {
            product.image = image.buffer;
        }

        // Save the updated product
        await product.save();

        res.status(200).json({ message: 'Product updated successfully' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: error.message || "Failed to update product" });
    }
}); 


app.delete("/deleteProduct/:productId", async (req, res) => {
    const productId = req.params.productId;

    try {
        // Find the product by ID and delete it
        const deletedProduct = await new_collections.findByIdAndDelete(productId);

        if (!deletedProduct) {
            return res.status(404).json({ error: 'Product not found' });
        }

        res.status(200).json({ message: 'Product deleted successfully' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: error.message || "Failed to delete product" });
    }
});


const jwt = require('jsonwebtoken');

const userSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String
  });

  const User = mongoose.model('User', userSchema);

  app.post('/register', upload, async (req, res) => {
    try {
        const { name, email, password } = req.body;

        // Check if the email is already registered
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'Email already exists' });
        }

        // Create a new user
        const newUser = new User({ name, email, password });
        await newUser.save()
            .then(() => {
                const token = jwt.sign({ email: newUser.email, name:newUser.name }, 'test@ecommerceWebsite12345');
                 res.status(201).json({ message: 'User registered successfully', token });
            })
            .catch((err) => {
                console.log(err);
                res.status(500).json({ error: "Failed to register user" });
            });
    } catch (error) {
        res.status(500).json({ error: "Failed to register user" });
    }
});



// Login endpoint
app.post('/login',upload, async (req, res) => {
   
    try {
      const { email, password } = req.body;
     
      // Check if the user exists
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(401).json({ message: 'Invalid email or password' });
      }
  
      // Check if the password matches
      if (user.password !== password) {
        return res.status(401).json({ message: 'Invalid email or password' });
      }
  
      // Generate JWT token upon successful authentication
      const token = jwt.sign({ email: user.email, name: user.name }, 'test@ecommerceWebsite12345');
      
      // Send the token back to the client
      res.status(200).json({ message: 'Login successful', token });
    } catch (error) {
      res.status(500).json({ error: 'Failed to login' });
    }
  });


  const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name: {
      type: String,
      required: [true, 'Please tell us your name!']
    },
    email: {
      type: String,
      required: [true, 'Please provide your email'],
      unique: true,
      lowercase: true
    //   validate: [validator.isEmail, 'Please provide a valid email']
    },
    photo: {
      type: String,
      default: 'default.jpg'
    },
    role: {
      type: String,
      enum: ['user', 'guide', 'lead-guide', 'admin'],
      default: 'user'
    },
    password: {
      type: String,
      required: [true, 'Please provide a password'],
      minlength: 8,
      select: false
    },
    passwordConfirm: {
      type: String,
      required: [true, 'Please confirm your password']
    //   validate: {
    //     // This only works on CREATE and SAVE!!!
    //     validator: function(el) {
    //       return el === this.password;
    //     },
    //     message: 'Passwords are not the same!'
    //   }
    },
    passwordChangedAt: Date,
    passwordResetToken: String,
    passwordResetExpires: Date,
    active: {
      type: Boolean,
      default: true,
      select: false
    }
  });

const User = mongoose.model('users', userSchema);

module.exports = User;
